import { OmniSharpServer } from './server';
import * as protocol from './protocol';
import * as vscode from 'vscode';
import { CancellationToken } from 'vscode-languageserver-protocol';
export declare function codeCheck(server: OmniSharpServer, request: protocol.Request, token: vscode.CancellationToken): Promise<protocol.QuickFixResponse>;
export declare function blockStructure(server: OmniSharpServer, request: protocol.V2.BlockStructureRequest, token: vscode.CancellationToken): Promise<protocol.V2.BlockStructureResponse>;
export declare function codeStructure(server: OmniSharpServer, request: protocol.V2.Structure.CodeStructureRequest, token: vscode.CancellationToken): Promise<protocol.V2.Structure.CodeStructureResponse>;
export declare function discoverTests(server: OmniSharpServer, request: protocol.V2.DiscoverTestsRequest): Promise<protocol.V2.DiscoverTestsResponse>;
export declare function filesChanged(server: OmniSharpServer, requests: protocol.Request[]): Promise<void>;
export declare function findImplementations(server: OmniSharpServer, request: protocol.FindImplementationsRequest, token: vscode.CancellationToken): Promise<protocol.QuickFixResponse>;
export declare function findSymbols(server: OmniSharpServer, request: protocol.FindSymbolsRequest, token: vscode.CancellationToken): Promise<protocol.FindSymbolsResponse>;
export declare function runFixAll(server: OmniSharpServer, request: protocol.RunFixAllRequest): Promise<protocol.RunFixAllActionResponse>;
export declare function getFixAll(server: OmniSharpServer, request: protocol.GetFixAllRequest): Promise<protocol.GetFixAllResponse>;
export declare function findUsages(server: OmniSharpServer, request: protocol.FindUsagesRequest, token: vscode.CancellationToken): Promise<protocol.QuickFixResponse>;
export declare function formatAfterKeystroke(server: OmniSharpServer, request: protocol.FormatAfterKeystrokeRequest, token: vscode.CancellationToken): Promise<protocol.FormatRangeResponse>;
export declare function formatRange(server: OmniSharpServer, request: protocol.FormatRangeRequest, token: vscode.CancellationToken): Promise<protocol.FormatRangeResponse>;
export declare function getCodeActions(server: OmniSharpServer, request: protocol.V2.GetCodeActionsRequest, token: vscode.CancellationToken): Promise<protocol.V2.GetCodeActionsResponse>;
export declare function goToDefinition(server: OmniSharpServer, request: protocol.V2.GoToDefinitionRequest, token: vscode.CancellationToken): Promise<protocol.V2.GoToDefinitionResponse>;
export declare function goToTypeDefinition(server: OmniSharpServer, request: protocol.GoToTypeDefinitionRequest, token: vscode.CancellationToken): Promise<protocol.GoToTypeDefinitionResponse>;
export declare function getSourceGeneratedFile(server: OmniSharpServer, request: protocol.SourceGeneratedFileRequest, token: vscode.CancellationToken): Promise<protocol.SourceGeneratedFileResponse>;
export declare function getUpdatedSourceGeneratedFile(server: OmniSharpServer, request: protocol.UpdateSourceGeneratedFileRequest): Promise<protocol.UpdateSourceGeneratedFileResponse>;
export declare function sourceGeneratedFileClosed(server: OmniSharpServer, request: protocol.SourceGeneratedFileRequest): Promise<unknown>;
export declare function rename(server: OmniSharpServer, request: protocol.RenameRequest, token: vscode.CancellationToken): Promise<protocol.RenameResponse>;
export declare function requestProjectInformation(server: OmniSharpServer, request: protocol.Request): Promise<protocol.ProjectInformationResponse>;
export declare function requestWorkspaceInformation(server: OmniSharpServer): Promise<protocol.WorkspaceInformationResponse>;
export declare function runCodeAction(server: OmniSharpServer, request: protocol.V2.RunCodeActionRequest): Promise<protocol.V2.RunCodeActionResponse>;
export declare function signatureHelp(server: OmniSharpServer, request: protocol.Request, token: vscode.CancellationToken): Promise<protocol.SignatureHelp>;
export declare function typeLookup(server: OmniSharpServer, request: protocol.TypeLookupRequest, token: vscode.CancellationToken): Promise<protocol.TypeLookupResponse>;
export declare function updateBuffer(server: OmniSharpServer, request: protocol.UpdateBufferRequest): Promise<boolean>;
export declare function getMetadata(server: OmniSharpServer, request: protocol.MetadataRequest): Promise<protocol.MetadataResponse>;
export declare function reAnalyze(server: OmniSharpServer, request: any): Promise<any>;
export declare function getTestStartInfo(server: OmniSharpServer, request: protocol.V2.GetTestStartInfoRequest): Promise<protocol.V2.GetTestStartInfoResponse>;
export declare function runTest(server: OmniSharpServer, request: protocol.V2.RunTestRequest): Promise<protocol.V2.RunTestResponse>;
export declare function runTestsInClass(server: OmniSharpServer, request: protocol.V2.RunTestsInClassRequest): Promise<protocol.V2.RunTestResponse>;
export declare function runTestsInContext(server: OmniSharpServer, request: protocol.V2.RunTestsInContextRequest): Promise<protocol.V2.RunTestResponse>;
export declare function debugTestGetStartInfo(server: OmniSharpServer, request: protocol.V2.DebugTestGetStartInfoRequest): Promise<protocol.V2.DebugTestGetStartInfoResponse>;
export declare function debugTestClassGetStartInfo(server: OmniSharpServer, request: protocol.V2.DebugTestClassGetStartInfoRequest): Promise<protocol.V2.DebugTestGetStartInfoResponse>;
export declare function debugTestsInContextGetStartInfo(server: OmniSharpServer, request: protocol.V2.DebugTestsInContextGetStartInfoRequest): Promise<protocol.V2.DebugTestGetStartInfoResponse>;
export declare function debugTestLaunch(server: OmniSharpServer, request: protocol.V2.DebugTestLaunchRequest): Promise<protocol.V2.DebugTestLaunchResponse>;
export declare function debugTestStop(server: OmniSharpServer, request: protocol.V2.DebugTestStopRequest): Promise<protocol.V2.DebugTestStopResponse>;
export declare function getSemanticHighlights(server: OmniSharpServer, request: protocol.V2.SemanticHighlightRequest): Promise<protocol.V2.SemanticHighlightResponse>;
export declare function getQuickInfo(server: OmniSharpServer, request: protocol.QuickInfoRequest, token: CancellationToken): Promise<protocol.QuickInfoResponse>;
export declare function getCompletion(server: OmniSharpServer, request: protocol.CompletionRequest, context: vscode.CancellationToken): Promise<protocol.CompletionResponse>;
export declare function getCompletionResolve(server: OmniSharpServer, request: protocol.CompletionResolveRequest, context: vscode.CancellationToken): Promise<protocol.CompletionResolveResponse>;
export declare function getCompletionAfterInsert(server: OmniSharpServer, request: protocol.CompletionAfterInsertionRequest): Promise<protocol.CompletionAfterInsertResponse>;
export declare function fileOpen(server: OmniSharpServer, request: protocol.Request): Promise<void>;
export declare function fileClose(server: OmniSharpServer, request: protocol.Request): Promise<void>;
export declare function isNetCoreProject(project: protocol.MSBuildProject): Promise<boolean>;
export declare function getInlayHints(server: OmniSharpServer, request: protocol.InlayHintRequest, context: vscode.CancellationToken): Promise<protocol.InlayHintResponse>;
export declare function resolveInlayHints(server: OmniSharpServer, request: protocol.InlayHintResolve, context: vscode.CancellationToken): Promise<protocol.InlayHint>;
